package main

import (
	"fmt"
	"log"
	"os"
	"os/signal"
	"syscall"
	"time"

	authModule "s29-be/internal/auth"
	userModule "s29-be/internal/user"
	"s29-be/pkg/cache"
	svcContext "s29-be/pkg/context"
	"s29-be/pkg/database"
	"s29-be/pkg/models"

	_ "s29-be/docs" // Generated by swag init

	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/cors"
	"github.com/gofiber/fiber/v2/middleware/logger"
	"github.com/gofiber/fiber/v2/middleware/recover"
	"github.com/gofiber/swagger"
	"github.com/joho/godotenv"
)

func main() {
	if err := godotenv.Load(); err != nil {
		log.Printf("No .env file found, using environment variables from container: %v", err)
	}

	db, err := database.NewWithConfig(
		os.Getenv("DB_HOST"),
		os.Getenv("DB_PORT"),
		os.Getenv("DB_USER"),
		os.Getenv("DB_PASSWORD"),
		os.Getenv("DB_NAME"),
		"disable",
	)
	if err != nil {
		log.Fatalf("Failed to initialize database: %v", err)
	}

	cacheConfig := cache.NewConfig()
	cacheClient, err := cache.NewClient(cacheConfig)
	if err != nil {
		log.Fatalf("Failed to initialize cache client: %v", err)
	}

	app := fiber.New()

	// Recover middleware - recovers from panics
	app.Use(recover.New())

	// CORS middleware
	app.Use(cors.New(cors.Config{
		AllowOrigins: "*",
		AllowMethods: "GET,POST,HEAD,PUT,DELETE,PATCH,OPTIONS",
		AllowHeaders: "Origin,Content-Type,Accept,Authorization,X-Requested-With",
	}))

	// // Custom logger middleware
	// app.Use(middleware.Logger())

	app.Use(logger.New())

	// Swagger route
	app.Get("/swagger/*", swagger.New(swagger.Config{
		URL:         "/swagger/doc.json",
		DeepLinking: false,
	}))

	v1 := app.Group("/api/v1")
	internalAPI := v1.Group("/internal")

	serviceContext := svcContext.NewServiceContext(db.GetDB(), app, &v1, &internalAPI, cacheClient)

	authModule := authModule.NewAuthModule(serviceContext)
	authModule.RegisterRoutes(v1)

	userModule := userModule.NewUserModule(serviceContext)
	userModule.RegisterRoutes(internalAPI)

	app.Get("/health", HealthHandler)

	app.Get("/ping", PingHandler)

	go func() {
		if err := app.Listen(":8080"); err != nil {
			log.Fatalf("Failed to start server: %v", err)
		}
	}()

	c := make(chan os.Signal, 1)                    // Create channel to signify a signal being sent
	signal.Notify(c, os.Interrupt, syscall.SIGTERM) // When an interrupt or termination signal is sent, notify the channel

	<-c // This blocks the main thread until an interrupt is received
	fmt.Println("Gracefully shutting down...")
	_ = app.Shutdown()

	fmt.Println("Running cleanup tasks...")

	// Your cleanup tasks go here
	// db.DB.
	cacheClient.Close()
	fmt.Println("Fiber was successful shutdown.")

}

// HealthHandler godoc
// @Summary      Health check endpoint
// @Description  Returns health status of the service with timestamp
// @Tags         health
// @Accept       json
// @Produce      json
// @Success      200  {object}  models.HealthResponse
// @Failure      500  {object}  models.ErrorResponse
// @Router       /health [get]
func HealthHandler(c *fiber.Ctx) error {
	response := models.HealthResponse{
		Status:    "ok",
		Timestamp: time.Now().Format(time.RFC3339),
		Version:   "1.0.0",
	}
	return c.JSON(response)
}

// PingHandler godoc
// @Summary      Ping endpoint
// @Description  Returns pong message with timestamp
// @Tags         health
// @Accept       json
// @Produce      json
// @Success      200  {object}  models.PingResponse
// @Failure      500  {object}  models.ErrorResponse
// @Router       /ping [get]
func PingHandler(c *fiber.Ctx) error {
	response := models.PingResponse{
		Message:   "pong",
		Timestamp: time.Now().Format(time.RFC3339),
	}
	return c.JSON(response)
}
